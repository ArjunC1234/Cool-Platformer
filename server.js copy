// Import required modules
const app = require("express")(); // Import the Express web application framework
const http = require("http").Server(app); // Create an HTTP server using Express app
const io = require("socket.io")(http); // Initialize Socket.IO for real-time communication
const port = process.env.PORT || 3000; // Set the port for the server, using the environment variable if available, otherwise use port 3000

// Allow the app to trust the proxy to get the client's IP address
app.set("trust proxy", true);

// Initialize variables for maintaining server state
var down = false; // A flag to indicate if the server is down for maintenance
var allowedips = [process.env.ALLOWED1]; // An array of allowed IP addresses during maintenance

// An array to store active sockets and their associated level paths
var levelSockets = [];

// Middleware function to check the IP address and serve appropriate content
function checkIP(req, res, path) {
  if (down) {
    // If the server is down for maintenance
    for (var i = 0; i < allowedips.length; i++) {
      // Check if the client's IP is in the allowed list
      if (req.ip == allowedips[i]) {
        // If the IP is allowed, serve the requested file
        res.sendFile(__dirname + path);
        return;
      }
    }
    // If the IP is not in the allowed list, serve the maintenance page
    res.sendFile(__dirname + "/maintainence.html");
  } else {
    // If the server is not down, serve the requested file
    res.sendFile(__dirname + path);
  }
}

// Define routes for different URLs and use the checkIP middleware to serve content
app.get("/", (req, res) => {
  checkIP(req, res, "/home.html");
});

app.get("/levels/openworld", (req, res) => {
  checkIP(req, res, "/levels/openworld.html");
});

app.get("/levels/tutorial", (req, res) => {
  checkIP(req, res, "/levels/tutorial.html");
});

app.get("/levels/lvl1", (req, res) => {
  checkIP(req, res, "/levels/lvl1.html");
});

app.get("/levels/lvl2", (req, res) => {
  checkIP(req, res, "/levels/lvl2.html");
});

app.get("/levels/lvl3", (req, res) => {
  checkIP(req, res, "/levels/lvl3.html");
});

// Socket.IO event listeners to handle client-server real-time communication
io.on('connection', (socket) => {
  // Event fired when a user joins a level
  socket.on("user joined", (path) => {
    io.emit("user joined", socket.id, path); // Emit to all clients that a user joined a specific level
    levelSockets.push({id : socket.id, path : path}); // Store the socket ID and level path in the array
  });

  // Event fired when a user disconnects from the server
  socket.on('disconnect', function() {
    for (var i = 0; i < levelSockets.length; i++) {
      if (levelSockets[i].id == socket.id) {
        io.emit("user left", socket.id, levelSockets[i].path); // Emit to all clients that a user left a specific level
        levelSockets.splice(i, 1); // Remove the socket from the array
      }
    } 
  });

  // Event fired when a user sends player data (e.g., position, rotation) to the server
  socket.on("send players", function(x, y, legrotation, right, id, path) {
    io.emit("send players", socket.id, x, y, legrotation, right, id, path); // Emit player data to all clients
  });

  // Event fired when a user sends position data to the server
  socket.on('position', (x, y, legrotation, right, path) => {
    io.emit("update", socket.id, x, y, legrotation, right, path); // Emit updated position data to all clients
  });
});

// Start the server and listen on the specified port
http.listen(port, () => {
  console.log(`running at ${port}`);
});
